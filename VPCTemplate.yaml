AWSTemplateFormatVersion: 2010-09-09
Description: ---



Resources: 

  # VPC (IPv4 & IPv6)
  # IP Range 10.15.0.0/16
  CompanyVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.15.0.0/16
      EnableDnsHostnames: True
      EnableDnsSupport: True
      Tags:
        - Key: Name
          Value: CompanyVPC

  # IPv6 address block for VPC/Subnets
  IPv6Addresses:
    Type: AWS::EC2::VPCCidrBlock
    Properties: 
      AmazonProvidedIpv6CidrBlock: True
      VpcId: !Ref CompanyVPC

  # Subnet 1 (Public)
  # IP Range 10.15.0.0/24
  PublicSubnetA:
    Type: AWS::EC2::Subnet
    DependsOn: IPv6Addresses #Forced dependancy as it's not automatically known
    Properties:
      AssignIpv6AddressOnCreation: True
      VpcId: !Ref CompanyVPC
      CidrBlock: 10.15.0.0/24
      Ipv6CidrBlock: 
        Fn::Sub: # Takes the IPv6 range from VPC, removes the subnet part of the range, and adds a smaller subnet part as this is the range for the subnet.
          - "${VpcPart}${SubnetPart}"
          - SubnetPart: '00::/64'
            VpcPart: !Select [ 0, !Split [ '00::/56', !Select [ 0, !GetAtt CompanyVPC.Ipv6CidrBlocks ]]]
      Tags:
        - Key: Name
          Value: Public-SN-A

  # Subnet 2 (Public)
  # IP Range 10.15.1.0/24
  PublicSubnetB:
    Type: AWS::EC2::Subnet
    DependsOn: IPv6Addresses #Forced dependancy as it's not automatically known
    Properties:
      AssignIpv6AddressOnCreation: True
      VpcId: !Ref CompanyVPC
      CidrBlock: 10.15.1.0/24
      Ipv6CidrBlock: 
        Fn::Sub: # Takes the IPv6 range from VPC, removes the subnet part of the range, and adds a smaller subnet part as this is the range for the subnet.
          - "${VpcPart}${SubnetPart}"
          - SubnetPart: '01::/64'
            VpcPart: !Select [ 0, !Split [ '00::/56', !Select [ 0, !GetAtt CompanyVPC.Ipv6CidrBlocks ]]]
      Tags:
        - Key: Name
          Value: Public-SN-B

  # Subnet 3 (Private)
  # IP Range 10.15.2.0/24
  PrivateSubnetA:
    Type: AWS::EC2::Subnet
    DependsOn: IPv6Addresses #Forced dependancy as it's not automatically known
    Properties:
      AssignIpv6AddressOnCreation: True
      VpcId: !Ref CompanyVPC
      CidrBlock: 10.15.2.0/24
      Ipv6CidrBlock: 
        Fn::Sub: # Takes the IPv6 range from VPC, removes the subnet part of the range, and adds a smaller subnet part as this is the range for the subnet.
          - "${VpcPart}${SubnetPart}"
          - SubnetPart: '02::/64'
            VpcPart: !Select [ 0, !Split [ '00::/56', !Select [ 0, !GetAtt CompanyVPC.Ipv6CidrBlocks ]]]
      Tags:
        - Key: Name
          Value: Private-SN-A

  # Subnet 4 (Private)
  # IP Range 10.15.3.0/24
  PrivateSubnetB:
    Type: AWS::EC2::Subnet
    DependsOn: IPv6Addresses #Forced dependancy as it's not automatically known
    Properties:
      AssignIpv6AddressOnCreation: True
      VpcId: !Ref CompanyVPC
      CidrBlock: 10.15.3.0/24
      Ipv6CidrBlock: 
        Fn::Sub: # Takes the IPv6 range from VPC, removes the subnet part of the range, and adds a smaller subnet part as this is the range for the subnet.
          - "${VpcPart}${SubnetPart}"
          - SubnetPart: '03::/64'
            VpcPart: !Select [ 0, !Split [ '00::/56', !Select [ 0, !GetAtt CompanyVPC.Ipv6CidrBlocks ]]]
      Tags:
        - Key: Name
          Value: Private-SN-B

  # Internet Gateway + Attachment to VPC
  InternetGateway:
    Type: AWS::EC2::InternetGateway
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties: 
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref CompanyVPC
  EgressOnlyIGW:
    Type: AWS::EC2::EgressOnlyInternetGateway
    Properties: 
      VpcId: !Ref CompanyVPC

  # Route Table & Associations to public subnets
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties: 
      VpcId: !Ref CompanyVPC
      Tags: 
        - Key: Name
          Value: Public-SN-A-RT
  PublicSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnetA
  PublicSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnetB

  # Route Table & Associations to private subnets
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties: 
      VpcId: !Ref CompanyVPC
      Tags: 
        - Key: Name
          Value: Private-SN-A-RT
  PrivateSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnetA
  PrivateSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnetB

  # Public Subnet Network ACL
  PublicSubnetNACL:
    Type: AWS::EC2::NetworkAcl
    Properties: 
      VpcId: !Ref CompanyVPC
      Tags: 
        - Key: Name
          Value: PublicSubnetNACL
  # Public Subnet A NACL Association
  PublicSubnetANACLAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties: 
      NetworkAclId: !Ref PublicSubnetNACL
      SubnetId: !Ref PublicSubnetA
  # Public Subnet B NACL Association
  PublicSubnetBNACLAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties: 
      NetworkAclId: !Ref PublicSubnetNACL
      SubnetId: !Ref PublicSubnetB

  # NACL Rule that allows all traffic ingress (IPv4)
  NACLEntry1: 
    Type: AWS::EC2::NetworkAclEntry
    Properties: 
      CidrBlock: 0.0.0.0/0
      NetworkAclId: !Ref PublicSubnetNACL
      RuleAction: allow
      Egress: False
      RuleNumber: 100
      Protocol: -1
  # NACL Rule that allows all traffic ingress (IPv6)
  NACLEntry2: 
    Type: AWS::EC2::NetworkAclEntry
    Properties: 
      Ipv6CidrBlock: ::/0
      NetworkAclId: !Ref PublicSubnetNACL
      RuleAction: allow
      Egress: False
      RuleNumber: 101
      Protocol: -1
  # NACL Rule that allows all traffic egress
  NACLEntry3:
    Type: AWS::EC2::NetworkAclEntry
    Properties: 
      CidrBlock: 0.0.0.0/0
      NetworkAclId: !Ref PublicSubnetNACL
      RuleAction: allow
      Egress: True
      RuleNumber: 100
      Protocol: -1
  # NACL Rule that allows all traffic egress
  NACLEntry4:
    Type: AWS::EC2::NetworkAclEntry
    Properties: 
      Ipv6CidrBlock: ::/0
      NetworkAclId: !Ref PublicSubnetNACL
      RuleAction: allow
      Egress: True
      RuleNumber: 101
      Protocol: -1
  # NACL Rule that blocks traffic from the IP 188.210.214.37/32
  NACLEntry5:
    Type: AWS::EC2::NetworkAclEntry
    Properties: 
      CidrBlock: 188.210.214.37/32 # Random IP, this would be changed to one you actually want/need to block in production
      NetworkAclId: !Ref PublicSubnetNACL
      RuleAction: deny
      Egress: False
      RuleNumber: 1
      Protocol: -1

  # Enabling VPC Flow Logs
  FlowLogBucket:
    Type: AWS::S3::Bucket
  FlowLogs:
    Type: AWS::EC2::FlowLog
    Properties: 
      LogDestinationType: s3
      LogDestination: 
        Fn::Join: [ ':', [ 'arn:aws:s3::', !Ref FlowLogBucket]]
      MaxAggregationInterval: 600
      ResourceId: !Ref CompanyVPC
      ResourceType: VPC
      TrafficType: ALL


# Next: Gateway/Interface Endpoints


# Other things: NAT Gateway, R53